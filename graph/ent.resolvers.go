package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"sandbox-gql/ent"
	"sandbox-gql/graph/model"
	"strconv"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id string) (ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Node - node"))
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []string) ([]ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Nodes - nodes"))
}

// Accounts is the resolver for the accounts field.
func (r *queryResolver) Accounts(ctx context.Context) ([]*model.Account, error) {
	entAccounts, err := r.client.Account.Query().All(ctx)
	if err != nil {
		return nil, err
	}
	modelAccounts := make([]*model.Account, len(entAccounts))
	for i, entAccount := range entAccounts {
		modelAccounts[i] = &model.Account{
			ID:    strconv.Itoa(entAccount.ID),
			Name:  entAccount.Name,
			Email: entAccount.Email,
		}
	}
	return modelAccounts, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
