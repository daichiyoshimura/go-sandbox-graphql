package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"sandbox-gql/graph/mapping"
	"sandbox-gql/graph/model"
)

// CreateAccount is the resolver for the createAccount field.
func (r *mutationResolver) CreateAccount(ctx context.Context, input model.CreateAccountInput) (*model.Account, error) {
	entInput := mapping.ToEntCreateAccountInput(input)
	entAccount, err := r.client.Account.Create().SetInput(entInput).Save(ctx)
	if err != nil {
		return nil, err
	}
	return mapping.ToGraphAccount(entAccount, nil), nil
}

// UpdateAccount is the resolver for the updateAccount field.
func (r *mutationResolver) UpdateAccount(ctx context.Context, id int, input model.UpdateAccountInput) (*model.Account, error) {
	panic(fmt.Errorf("not implemented: UpdateAccount - updateAccount"))
}

// CreateItem is the resolver for the createItem field.
func (r *mutationResolver) CreateItem(ctx context.Context, input model.CreateItemInput) (*model.Item, error) {
	entInput := mapping.ToEntCreateItemInput(input)
	entItem, err := r.client.Item.Create().SetInput(entInput).Save(ctx)
	if err != nil {
		return nil, err
	}
	entAccount, err := entItem.Account(ctx)
	if err != nil {
		return nil, err
	}
	return mapping.ToGraphItem(entItem, mapping.ToGraphAccount(entAccount, nil)), nil
}

// UpdateItem is the resolver for the updateItem field.
func (r *mutationResolver) UpdateItem(ctx context.Context, id int, input model.UpdateItemInput) (*model.Item, error) {
	panic(fmt.Errorf("not implemented: UpdateItem - updateItem"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
