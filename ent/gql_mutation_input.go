// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"
)

// CreateAccountInput represents a mutation input for creating accounts.
type CreateAccountInput struct {
	Name      string
	Email     string
	CreatedAt *time.Time
	UpdatedAt *time.Time
}

// Mutate applies the CreateAccountInput on the AccountMutation builder.
func (i *CreateAccountInput) Mutate(m *AccountMutation) {
	m.SetName(i.Name)
	m.SetEmail(i.Email)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
}

// SetInput applies the change-set in the CreateAccountInput on the AccountCreate builder.
func (c *AccountCreate) SetInput(i CreateAccountInput) *AccountCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateAccountInput represents a mutation input for updating accounts.
type UpdateAccountInput struct {
	Name      *string
	Email     *string
	CreatedAt *time.Time
	UpdatedAt *time.Time
}

// Mutate applies the UpdateAccountInput on the AccountMutation builder.
func (i *UpdateAccountInput) Mutate(m *AccountMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
}

// SetInput applies the change-set in the UpdateAccountInput on the AccountUpdate builder.
func (c *AccountUpdate) SetInput(i UpdateAccountInput) *AccountUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateAccountInput on the AccountUpdateOne builder.
func (c *AccountUpdateOne) SetInput(i UpdateAccountInput) *AccountUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateItemInput represents a mutation input for creating items.
type CreateItemInput struct {
	Name           string
	Price          *int
	OwnerAccountID string
	CreatedAt      *time.Time
	UpdatedAt      *time.Time
}

// Mutate applies the CreateItemInput on the ItemMutation builder.
func (i *CreateItemInput) Mutate(m *ItemMutation) {
	m.SetName(i.Name)
	if v := i.Price; v != nil {
		m.SetPrice(*v)
	}
	m.SetOwnerAccountID(i.OwnerAccountID)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
}

// SetInput applies the change-set in the CreateItemInput on the ItemCreate builder.
func (c *ItemCreate) SetInput(i CreateItemInput) *ItemCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateItemInput represents a mutation input for updating items.
type UpdateItemInput struct {
	Name           *string
	Price          *int
	OwnerAccountID *string
	CreatedAt      *time.Time
	UpdatedAt      *time.Time
}

// Mutate applies the UpdateItemInput on the ItemMutation builder.
func (i *UpdateItemInput) Mutate(m *ItemMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Price; v != nil {
		m.SetPrice(*v)
	}
	if v := i.OwnerAccountID; v != nil {
		m.SetOwnerAccountID(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
}

// SetInput applies the change-set in the UpdateItemInput on the ItemUpdate builder.
func (c *ItemUpdate) SetInput(i UpdateItemInput) *ItemUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateItemInput on the ItemUpdateOne builder.
func (c *ItemUpdateOne) SetInput(i UpdateItemInput) *ItemUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
