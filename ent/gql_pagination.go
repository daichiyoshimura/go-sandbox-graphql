// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"io"
	"sandbox-gql/ent/account"
	"strconv"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[int]
	PageInfo       = entgql.PageInfo[int]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// AccountEdge is the edge representation of Account.
type AccountEdge struct {
	Node   *Account `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// AccountConnection is the connection containing edges to Account.
type AccountConnection struct {
	Edges      []*AccountEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *AccountConnection) build(nodes []*Account, pager *accountPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Account
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Account {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Account {
			return nodes[i]
		}
	}
	c.Edges = make([]*AccountEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &AccountEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// AccountPaginateOption enables pagination customization.
type AccountPaginateOption func(*accountPager) error

// WithAccountOrder configures pagination ordering.
func WithAccountOrder(order *AccountOrder) AccountPaginateOption {
	if order == nil {
		order = DefaultAccountOrder
	}
	o := *order
	return func(pager *accountPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAccountOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAccountFilter configures pagination filter.
func WithAccountFilter(filter func(*AccountQuery) (*AccountQuery, error)) AccountPaginateOption {
	return func(pager *accountPager) error {
		if filter == nil {
			return errors.New("AccountQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type accountPager struct {
	reverse bool
	order   *AccountOrder
	filter  func(*AccountQuery) (*AccountQuery, error)
}

func newAccountPager(opts []AccountPaginateOption, reverse bool) (*accountPager, error) {
	pager := &accountPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAccountOrder
	}
	return pager, nil
}

func (p *accountPager) applyFilter(query *AccountQuery) (*AccountQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *accountPager) toCursor(a *Account) Cursor {
	return p.order.Field.toCursor(a)
}

func (p *accountPager) applyCursors(query *AccountQuery, after, before *Cursor) (*AccountQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultAccountOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *accountPager) applyOrder(query *AccountQuery) *AccountQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultAccountOrder.Field {
		query = query.Order(DefaultAccountOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *accountPager) orderExpr(query *AccountQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultAccountOrder.Field {
			b.Comma().Ident(DefaultAccountOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Account.
func (a *AccountQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AccountPaginateOption,
) (*AccountConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAccountPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if a, err = pager.applyFilter(a); err != nil {
		return nil, err
	}
	conn := &AccountConnection{Edges: []*AccountEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := a.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if a, err = pager.applyCursors(a, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		a.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := a.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	a = pager.applyOrder(a)
	nodes, err := a.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// AccountOrderFieldName orders Account by name.
	AccountOrderFieldName = &AccountOrderField{
		Value: func(a *Account) (ent.Value, error) {
			return a.Name, nil
		},
		column: account.FieldName,
		toTerm: account.ByName,
		toCursor: func(a *Account) Cursor {
			return Cursor{
				ID:    a.ID,
				Value: a.Name,
			}
		},
	}
	// AccountOrderFieldEmail orders Account by email.
	AccountOrderFieldEmail = &AccountOrderField{
		Value: func(a *Account) (ent.Value, error) {
			return a.Email, nil
		},
		column: account.FieldEmail,
		toTerm: account.ByEmail,
		toCursor: func(a *Account) Cursor {
			return Cursor{
				ID:    a.ID,
				Value: a.Email,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f AccountOrderField) String() string {
	var str string
	switch f.column {
	case AccountOrderFieldName.column:
		str = "ID"
	case AccountOrderFieldEmail.column:
		str = "EMAIL"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f AccountOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *AccountOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("AccountOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *AccountOrderFieldName
	case "EMAIL":
		*f = *AccountOrderFieldEmail
	default:
		return fmt.Errorf("%s is not a valid AccountOrderField", str)
	}
	return nil
}

// AccountOrderField defines the ordering field of Account.
type AccountOrderField struct {
	// Value extracts the ordering value from the given Account.
	Value    func(*Account) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) account.OrderOption
	toCursor func(*Account) Cursor
}

// AccountOrder defines the ordering of Account.
type AccountOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *AccountOrderField `json:"field"`
}

// DefaultAccountOrder is the default ordering of Account.
var DefaultAccountOrder = &AccountOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &AccountOrderField{
		Value: func(a *Account) (ent.Value, error) {
			return a.ID, nil
		},
		column: account.FieldID,
		toTerm: account.ByID,
		toCursor: func(a *Account) Cursor {
			return Cursor{ID: a.ID}
		},
	},
}

// ToEdge converts Account into AccountEdge.
func (a *Account) ToEdge(order *AccountOrder) *AccountEdge {
	if order == nil {
		order = DefaultAccountOrder
	}
	return &AccountEdge{
		Node:   a,
		Cursor: order.Field.toCursor(a),
	}
}
